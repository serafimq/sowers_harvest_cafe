import mongoose from 'mongoose';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∫—ç—à–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
interface IMongoDatabaseConnection {
  conn: typeof mongoose | null;
  promise: Promise<typeof mongoose> | null;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
declare global {
  // eslint-disable-next-line no-var
  var mongoose: IMongoDatabaseConnection | undefined;
}

// –ö—ç—à–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
let cached = global.mongoose as IMongoDatabaseConnection;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
 * @returns {Promise<typeof mongoose>}
 */
export async function connectToDatabase(): Promise<typeof mongoose> {
  // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –∫—ç—à–µ
  if (cached.conn) {
    // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ
    if (cached.conn.connection.readyState === 1) { // 1 === 'connected'
      console.log(`‚úÖ Using cached MongoDB connection to database: ${cached.conn.connection.name}`);
      return cached.conn;
    } else {
      // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –∫—ç—à–µ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ "—É–º–µ—Ä–ª–æ", —Å–±—Ä–æ—Å–∏–º –∫—ç—à
      console.warn('‚ö†Ô∏è Cached connection found but was not ready. Reconnecting...');
      cached.conn = null;
      cached.promise = null;
    }
  }

  // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
  if (!cached.promise) {
    const opts = {
      bufferCommands: false, // –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
      serverSelectionTimeoutMS: 5000, // –¢–∞–π–º–∞—É—Ç –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–º—Å)
    };

    // !!! –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –±–µ–∑ NEXT_PUBLIC_ –ø—Ä–µ—Ñ–∏–∫—Å–∞ !!!
    const MONGODB_URI = process.env.MONGODB_URI; // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–£ –ü–ï–†–ï–ú–ï–ù–ù–£–Æ

    if (!MONGODB_URI) {
      throw new Error('‚ùå Please define the MONGODB_URI environment variable inside .env.local');
    }
    console.log('üöÄ Attempting new MongoDB connection...');
    console.log(`üí° Using URI starting with: ${MONGODB_URI.substring(0, MONGODB_URI.indexOf('@') > 0 ? MONGODB_URI.indexOf('@') : 20)}...`); // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ URI –±–µ–∑ –ø–∞—Ä–æ–ª—è

    cached.promise = mongoose.connect(MONGODB_URI, opts).then(mongooseInstance => {
      console.log(`‚úÖ Successfully established new MongoDB connection to database: ${mongooseInstance.connection.name}`);
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
      mongooseInstance.connection.on('error', err => {
        console.error('‚ùå MongoDB connection error after initial connection:', err);
        cached.conn = null; // –°–±—Ä–æ—Å–∏—Ç—å –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
        cached.promise = null;
      });
      mongooseInstance.connection.on('disconnected', () => {
        console.warn('‚ö†Ô∏è MongoDB disconnected.');
        cached.conn = null; // –°–±—Ä–æ—Å–∏—Ç—å –∫—ç—à –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        cached.promise = null;
      });
      return mongooseInstance;
    });
  } else {
    console.log('‚è≥ Waiting for existing connection promise to resolve...');
  }

  try {
    cached.conn = await cached.promise;
  } catch (e) {
    cached.promise = null; // –û–±–Ω—É–ª—è–µ–º –ø—Ä–æ–º–∏—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–ª–∞ –Ω–æ–≤—ã–π
    console.error('‚ùå MongoDB connection failed:', e);
    // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã API —Ä–æ—É—Ç –º–æ–≥ –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    throw new Error(`Failed to connect to database. ${e instanceof Error ? e.message : e}`);
  }

  return cached.conn;
}

export default connectToDatabase;